<!-- *********************************************** ancien *********************************************** -->

############################################################################
Pour créer un nouvel utilisateur via l'API, voici les spécifications :
############################################################################

Endpoint : POST http://localhost:8181/create_user

Format des données (JSON) :
{
    "username": "string"
    "email": "string",      // L'email unique de l'utilisateur
    "password": "string"    // Le mot de passe de l'utilisateur
}

Exemple de requête curl :
curl -X POST http://localhost:8181/create_user \
     -H "Content-Type: application/json" \
     -d '{
           "username": "jdupont"
           "email": "jean.dupont@example.com",
           "password": "motdepasse123"
         }'

Réponses possibles :

200 : Utilisateur créé avec succès
{
    "user": {
        "uid": "uid" // int unique que tu peux choisir
    }
}
400 : Données manquantes
409 : Email déjà utilisé
410 : Username deja utilise
411 : Email et Usename deja utilise
500 : Erreur serveur
⚠️ Notes importantes :

Tous les champs sont obligatoires (username, email, password)
L'email doit être unique dans la base de données
Le username doit être unique dans la base de données
Les champs ne doivent pas être vides
Le mot de passe doit être sécurisé :
Évitez les mots de passe trop simples
Préférez une combinaison de lettres, chiffres et caractères spéciaux
Longueur minimale recommandée : 8 caractères
Exemple de données valides :
{
    "username": "jdupont"
    "email": "jean.dupont@example.com",
    "password": "MonMotDePasse123!"
}



#########################################################################################
Pour récupérer les informations d'un utilisateur via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/get_user

Par UID :setCookie


Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/get_user \
     -H "Content-Type: application/json" \
     -d '{
           "uid": 1
         }'

200 : Utilisateur trouvé, avec les données suivantes :
{
    "user": {
        "nom": "Test",
        "prenom": "User",
        "dob": "dob", // date of birth
        "gender": "gender",
        "preference": "preference",
        "interests": []"interests" // tableau
        "picture": []"picture" //tableau et ca peut encore changer en fonction de comment est stocker l'image
        "bio": "bio"
    }
}

200 : Utilisateur trouvé (avec ses informations)
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'uid
Les informations sensibles (mot de passe) ne sont pas incluses dans la réponse
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie toutes les infos dont j'ai besoin pour presenter le profile a une autre personne


#########################################################################################
Pour connecter un utilisateur via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/login

Deux méthodes possibles pour récupérer les informations :

Par Email/Mdp :
{
    "Email":        "string"
    "Mot de passe": "string"
}

Par Username/Mdp :
{
    "Username":     "string"
    "Mot de passe": "string"
}


Exemples de requêtes curl :

Recherche par Email/Mdp :
curl -X POST http://localhost:8181/login \
     -H "Content-Type: application/json" \
     -d '{
            "Email":        "test@exemple.com",
            "Mot de passe": "test"
         }'

Recherche par Username/Mdp :
curl -X POST http://localhost:8181/login \
     -H "Content-Type: application/json" \
     -d '{
            "Username": "jdupont",
            "Mot de passe": "test"
         }'

200 : Utilisateur trouvé, avec les données suivantes :
{
    "user": {
        "uid": 1,
    }
}

200 : Utilisateur trouvé + uid
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir Email/Mdp ou Username/Mdp
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Il faut renvoyer firstStep

#########################################################################################
Pour récupérer mes informations via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/me

Par UID :
{
    "uid": integer    // L'identifiant unique de l'utilisateur
}


Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/me \
     -H "Content-Type: application/json" \
     -d '{
           "uid": 1
         }'

200 : Utilisateur trouvé, avec les données suivantes :
{
    "user": {
        "username": "username"
        "email": "test@exemple.com"
        "nom": "Test",
        "prenom": "User",
        "dob": "dob", // date of birth
        "gender": "gender",
        "preference": "preference",
        "interests": []"interests" // tableau
        "picture": []"picture" //tableau et ca peut encore changer en fonction de comment est stocker l'image
        "bio": "bio"
    }
}

200 : Utilisateur trouvé (avec ses informations)
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'uid
Les informations sensibles (mot de passe) ne sont pas incluses dans la réponse
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie absolument toute les infos sauf Mdp et donnees sensible

#########################################################################################
Pour modifier mes informations via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/update

Par UID :
{
    "uid": integer    // L'identifiant unique de l'utilisateur
}


Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/update \
     -H "Content-Type: application/json" \
     -d '{
            "uid": 1
            "nom": "Test",
            "prenom": "User",
            "dob": "dob", // date of birth
            "gender": "gender",
            "preference": "preference",
            "interests": []"interests" // tableau
            "picture": []"picture" //tableau et ca peut encore changer en fonction de comment est stocker l'image
            "bio": "bio"
         }'

200 : Information update correctement
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'uid
Les informations sensibles (mot de passe) ne sont pas incluses dans la réponse
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie absolument toute les infos sauf Mdp et donnees sensible




<!-- *********************************************** nouvea ici *********************************************** -->


<!-- ATTENTION -->
Tu prefere quoi ?
1) Si la chatRoom n'existe pas, il faut la creer
2) Creer la chatRoom lors du match des 2 Users
3) Faire un Endpoint create_chatroom
4) ... <!-- dit moi si tu as d'autre idee -->

Est-ce que tu cree l'id de la chatRoom toi meme ou je le fais ?


#########################################################################################
Pour ajouter un message dans la db pour une chat room specifique via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/new_message

Par UID :
{
    "message": "exemple de message"
    "chatRoom": id de la chat room
    "userID": id de celui qui envoie le message
}


Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/new_message \
     -H "Content-Type: application/json" \
     -d '{
            "message": "exemple de message"
            "chatRoom": id de la chat room
            "userID": id de celui qui envoie le message
         }'

200 : message ajoute correctement
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
<!-- ajouter les erreurs si user/message/chatroom existe pas, je te laisse voir pour les codes-->
⚠️ Notes importantes :

Vous devez fournir le userID, le message et l'id de la chatroom
La reponse est: 200 ok ou erreur
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification

#########################################################################################
Pour recevoir les message d'une chat room specifique via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/get_message

Par UID :
{
    "chatRoom": id de la chat room
    "userID": id de celui qui envoie le message
}


Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/get_message \
     -H "Content-Type: application/json" \
     -d '{
            "chatRoom": id de la chat room
            "userID": id de celui qui envoie le message
         }'

200 : Ok, avec les donnees suivante:
{
    []"messages": { // tableau
        "userID": "UserID",
        "message": "Exemple de message"
    }
}
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
<!-- ajouter les erreurs si user/chatroom/mauvaisUser existe pas, je te laisse voir pour les codes-->
⚠️ Notes importantes :

Vous devez fournir le userID et l'id de la chatroom
La reponse est: 200 ok ou erreur
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
erreur possible: Si le userID n'est pas dans la chatroom, ne pas renvoyer les messages et renvoyer une erreur

#########################################################################################
Pour récupérer les informations d'un utilisateur via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/get_user_by_username

Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/get_user_by_username \
     -H "Content-Type: application/json" \
     -d '{
           "username": username
         }'

200 : Utilisateur trouvé, avec les données suivantes :
{
    "user": {
        "nom": "Test",
        "prenom": "User",
        "dob": "dob", // date of birth
        "gender": "gender",
        "preference": "preference",
        "interests": []"interests" // tableau
        "picture": []"picture" //tableau et ca peut encore changer en fonction de comment est stocker l'image
        "bio": "bio"
    }
}

200 : Utilisateur trouvé (avec ses informations)
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'uid
Les informations sensibles (mot de passe) ne sont pas incluses dans la réponse
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie toutes les infos dont j'ai besoin pour presenter le profile a une autre personne

#########################################################################################
Pour recevoir toutes les chatRooms qui me corresponde via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/get_my_chatroom

Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/get_my_chatroom \
     -H "Content-Type: application/json" \
     -d '{
           "userID": "id du user"
         }'

200 : Utilisateur trouvé, avec les données suivantes :
{
    "user": {
        "chatRoomID": []"chatRoomID" // tableau
    }
}

400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'id du User
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie tous les chatsRoomID du User

#########################################################################################
Pour recevoir toutes les chatRooms qui me corresponde via l'API, voici les spécifications :
#########################################################################################

<!-- Cette fonction sert a creer de nouvelle chatRoom afin de ne pas utiliser le meme id qu'une autre -->

Endpoint : GET http://localhost:8181/get_all_chatroom

Exemples de requêtes curl :

Recherche par UID :
curl -X GET http://localhost:8181/get_all_chatroom \
     -H "Content-Type: application/json" \

200 : Utilisateur trouvé, avec les données suivantes :
{
    "chatRoom": {
        "chatRoomID": []"chatRoomID" // tableau
    }
}

400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'id du User
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie toutes les chatsRoomID

#########################################################################################
Pour changer le password via l'API, voici les spécifications :
#########################################################################################

Endpoint : POST http://localhost:8181/change_password

Exemples de requêtes curl :

Recherche par UID :
curl -X POST http://localhost:8181/change_password \
     -H "Content-Type: application/json" \
     -d '{
        "oldPassword": "oldPassword",
        "newPassword": "newPassword"
     }'

200 : Mot de passe change avec succes
400 : Données manquantes ou format incorrect
404 : Utilisateur non trouvé -> a definir peut etre 401
500 : Erreur serveur
⚠️ Notes importantes :

Vous devez fournir l'id du User
Les champs fournis ne doivent pas être vides
Utilisez de préférence une connexion sécurisée (HTTPS) pour transmettre les données d'authentification
Renvoie le code adequat


/*

fonctions mise en place pour les chatroooms

*/


* /create_chatroom : cree une chatroom et te renvoi son id 
* /add_user_to_chatroom : ajoute un user a une room
* /remove_user_from_chatroom : retire un user de une room
* 


/************************ *********/
    doc de la nouvelle fonctions  
/***********************************/

/*
/************************************************** */
/create_chatroom
Description: Crée une nouvelle chatroom et ajoute les utilisateurs spécifiés.
Entrée:
{
  "user_ids": [1, 2],         // tableau d'IDs utilisateurs
  "name": "Chat Name",        // nom de la chatroom (optionnel)
}
Réponse (succès - 200):
{
  "status": "success",
  "chatroom_id": 5,           // id de la chatroom créée
  "message": "Chatroom created successfully"
}
Erreurs:

400: Format JSON invalide / Paramètres manquants
404: Utilisateurs non trouvés
500: Erreur serveur

/************************************************** */
/add_user_to_chatroom
Description: Ajoute un utilisateur à une chatroom existante.
entree 
{
  "chatroom_id": 5,           // id de la chatroom
  "user_id": 3                // id de l'utilisateur à ajouter
}

Réponse (succès - 200):

{
  "status": "success",
  "message": "User added to chatroom successfully"
}

Erreurs:

400: Format JSON invalide / Utilisateur déjà dans la chatroom
404: Utilisateur ou chatroom non trouvés
500: Erreur serveur

/*************************************************** */
/remove_user_from_chatroom
Description: Retire un utilisateur d'une chatroom.

Entrée:
{
  "chatroom_id": 5,           // id de la chatroom
  "user_id": 3                // id de l'utilisateur à retirer
}

Réponse (succès - 200):
{
  "status": "success",
  "message": "User removed from chatroom successfully"
}

Erreurs:

400: Format JSON invalide / Utilisateur pas dans la chatroom
404: Chatroom non trouvée
500: Erreur serveur

/*************************************************** */
/************************************************** */
/new_message
Description: Ajoute un nouveau message dans une chatroom spécifique.

Entrée:
{
  "message": "Hello world!",      // contenu du message
  "chatRoom": 5,                  // id de la chatroom
  "userID": 3                     // id de l'utilisateur qui envoie
}

Réponse (succès - 200):
{
  "status": "success",
  "message": "Message added successfully"
}

Erreurs:
400: Format JSON invalide / Message vide
404: Utilisateur ou chatroom non trouvés
403: Utilisateur non membre de la chatroom
500: Erreur serveur
/************************************************** */
/************************************************** */
/get_message
Description: Récupère tous les messages d'une chatroom spécifique.

Entrée:
{
  "chatRoom": 5,                  // id de la chatroom
  "userID": 3                     // id de l'utilisateur qui fait la requête
}

Réponse (succès - 200):
{
  "status": "success",
  "messages": [
    {
      "userID": 1,
      "message": "Hello world!",
      "createdAt": "2023-05-20 14:23:36"
    },
    {
      "userID": 2,
      "message": "Bonjour!",
      "createdAt": "2023-05-20 14:24:01"
    }
  ]
}

Erreurs:
400: Format JSON invalide / Paramètres invalides
404: Utilisateur ou chatroom non trouvés
403: Utilisateur non membre de la chatroom
500: Erreur serveur
/************************************************** */
/*************************************************** */
/*************************************************** */
/get_user_by_username
Description: Récupère les informations complètes d'un utilisateur à partir de son nom d'utilisateur.

Entrée:
{
  "username": "user123"      // nom d'utilisateur recherché
}

Réponse (succès - 200):
{
  "user": {
    "nom": "Dupont",
    "prenom": "Jean",
    "dob": "1990-01-01",            // date de naissance
    "gender": "homme",              // genre de l'utilisateur
    "preference": "femme",          // préférence de genre 
    "interests": [                  // tableau des centres d'intérêt
      "sport",
      "musique",
      "voyage"
    ],
    "pictures": [                   // tableau des chemins vers les photos
      "/uploads/user123/profile.jpg",
      "/uploads/user123/photo2.jpg"
    ],
    "bio": "Passionné de voyages et de nouvelles rencontres."
  }
}

Erreurs:
400: Format JSON invalide / Nom d'utilisateur manquant
404: Utilisateur non trouvé
405: Méthode non autorisée (seule la méthode POST est acceptée)
500: Erreur serveur
/*************************************************** */
/*************************************************** */
/*************************************************** */
/get_my_chatroom
Description: Récupère toutes les chatrooms auxquelles un utilisateur participe.

Entrée:
{
  "userID": 3                     // ID de l'utilisateur qui fait la requête
}

Réponse (succès - 200):
{
  "user": {
    "chatRoomID": [1, 5, 9]       // tableau des IDs de chatrooms
  }
}

Erreurs:
400: Format JSON invalide / ID utilisateur invalide
404: Utilisateur non trouvé
405: Méthode non autorisée (seule la méthode POST est acceptée)
500: Erreur serveur
/************************************************** */
/*************************************************** */
/*************************************************** */
/*************************************************** */
/get_all_chatroom
Description: Récupère toutes les chatrooms existantes dans le système.

Cette fonction ne nécessite aucun paramètre d'entrée et renvoie un tableau 
de tous les IDs de chatrooms existantes. Elle est particulièrement utile lors 
de la création de nouvelles chatrooms pour éviter les conflits d'ID.

Méthode: GET
Endpoint: http://localhost:8181/get_all_chatroom

Entrée:
Aucun paramètre requis

Réponse (succès - 200):
{
  "chatRoom": {
    "chatRoomID": [1, 2, 3, 5, 8]  // tableau des IDs de toutes les chatrooms
  }
}

Erreurs:
405: Méthode non autorisée (seule la méthode GET est acceptée)
500: Erreur serveur

⚠️ Notes importantes:
- Cette fonction renvoie TOUTES les chatrooms existantes, pas seulement celles d'un utilisateur spécifique
- Pour obtenir uniquement les chatrooms d'un utilisateur spécifique, utilisez plutôt l'endpoint /get_my_chatroom
- Utilisez de préférence une connexion sécurisée (HTTPS) pour toutes les communications avec l'API
/*************************************************** */
/*************************************************** */
/change_password
Description: Change le mot de passe d'un utilisateur après vérification de l'ancien mot de passe.

Cette fonction permet à un utilisateur de changer son mot de passe de manière sécurisée.
Le système vérifie d'abord que l'ancien mot de passe est correct avant d'accepter la modification.

Entrée:
{
  "userID": 3,                     // ID de l'utilisateur
  "oldPassword": "Ancien123",      // Ancien mot de passe
  "newPassword": "Nouveau456"      // Nouveau mot de passe
}

Réponse (succès - 200):
{
  "status": "success",
  "message": "Password changed successfully"
}

Erreurs:
400: Format JSON invalide / Données manquantes / Nouveau mot de passe trop faible
401: Ancien mot de passe incorrect
404: Utilisateur non trouvé
405: Méthode non autorisée (seule la méthode POST est acceptée)
500: Erreur serveur

⚠️ Notes importantes:
- L'identifiant de l'utilisateur (userID) doit être fourni
- L'ancien mot de passe doit correspondre exactement à celui stocké en base
- Le nouveau mot de passe doit comporter au moins 8 caractères
- Pour des raisons de sécurité, utilisez toujours HTTPS pour ces requêtes
/************************************************** */
/*************************************************** */


/*************************************************** */


/*************************************************** */

*/



a definir:

Comment verifier si les terms ont bien ete signe et que faire en fonction de la reponse
Comment savoir si l'inscription est bien finis et que fair en fonction de la reponse